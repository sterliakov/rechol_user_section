name: Deploy

on:
    workflow_dispatch:
    push:
        branches: [feature/st-clean-static]

env:
    STATIC_TAG: app:static
    DEPLOY_ROLE: arn:aws:iam::129037961992:role/rechol-deploy-backend
    LAMBDA_NAME: rechol-backend
    LAMBDA_ALIAS: stable
    DEPLOYED_TAG: deployed

jobs:
    deploy:
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
        steps:
        -   uses: actions/checkout@v4

      # Login
        -   uses: aws-actions/configure-aws-credentials@v4
            with:
                role-to-assume: ${{ env.DEPLOY_ROLE }}
                aws-region: us-east-1
        -   uses: aws-actions/amazon-ecr-login@v2
            id: ecr

        -   id: install-aws-cli
            uses: unfor19/install-aws-cli-action@v1
            with:
                version: 2
                verbose: false
                arch: amd64

      # Build a container image
        -   name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3
        -   uses: docker/build-push-action@v6
            with:
                push: true
                tags: >-
                    ${{ steps.ecr.outputs.registry }}/rechol-backend:${{ github.sha }}
                    ,${{ steps.ecr.outputs.registry }}/rechol-backend:${{ env.DEPLOYED_TAG }}
                target: deploy
                provenance: false
                context: .

      # Build a dev image to run collectstatic
        -   uses: docker/build-push-action@v6
            with:
                tags: ${{ env.STATIC_TAG }}
                target: staticfiles
                load: true
        -   name: Run collectstatic
            run: |
                docker run \
                    -e AWS_DEFAULT_REGION \
                    -e AWS_REGION \
                    -e AWS_ACCESS_KEY_ID \
                    -e AWS_SECRET_ACCESS_KEY \
                    -e AWS_SESSION_TOKEN \
                    --rm ${{ env.STATIC_TAG }} \
                    collectstatic --noinput

                docker run \
                    -e AWS_DEFAULT_REGION \
                    -e AWS_REGION \
                    -e AWS_ACCESS_KEY_ID \
                    -e AWS_SECRET_ACCESS_KEY \
                    -e AWS_SESSION_TOKEN \
                    -e STATIC_COMPRESS=1 \
                    --entrypoint /bin/bash \
                    --rm ${{ env.STATIC_TAG }} \
                    -c './manage.py collectstatic --noinput && ./manage.py compress'

      # Deploy a function
        -   name: Deploy
            run: |
                set -o pipefail
                version=$(
                    aws lambda update-function-code --publish \
                    --function-name "${{ env.LAMBDA_NAME }}" \
                    --image-uri "${{ steps.ecr.outputs.registry }}/rechol-backend:${{ env.DEPLOYED_TAG }}" \
                    | jq -r '.Version'
                )
                aws lambda wait function-updated --function-name "${{ env.LAMBDA_NAME }}"
                aws lambda wait function-active --function-name "${{ env.LAMBDA_NAME }}"
                aws lambda update-alias \
                    --name "${{ env.LAMBDA_ALIAS }}" \
                    --function-name "${{ env.LAMBDA_NAME }}" \
                    --function-version "$version"

      # Migrate
        -   name: Migrate
            run: |
                aws lambda invoke \
                    --function-name "${{ env.LAMBDA_NAME }}" \
                    --qualifier "${{ env.LAMBDA_ALIAS }}"
                    --invocation-type RequestResponse \
                    --payload '{ "action": "MIGRATE" }' \
                    --log-type Tail \
                    --cli-binary-format raw-in-base64-out \
                    out.txt
                echo "Function output:"
                jq <out.txt
