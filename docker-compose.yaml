version: '3.9'

services:
    autoheal:
        restart: always
        image: willfarrell/autoheal
        environment:
        -   AUTOHEAL_CONTAINER_LABEL=all
        volumes:
        -   /var/run/docker.sock:/var/run/docker.sock
    db:
        image: postgres:16-alpine
        env_file:
        -   .env
        restart: always
        volumes:
        -   db_volume_24_25:/var/lib/postgresql/data
        healthcheck:
            test: pg_isready -U ${POSTGRES_USER}
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
        -   djangonetwork
    redis:
        image: redis:alpine
        healthcheck:
            test: [CMD-SHELL, redis-cli ping | grep PONG]
            interval: 10s
            timeout: 5s
            retries: 5
        volumes:
        -   redis_data:/var/lib/redis
        -   redis_conf:/usr/local/etc/redis/redis.conf
        environment:
        -   REDIS_REPLICATION_MODE=master
        networks:
        -   djangonetwork
        restart: always
    app:
        env_file: .env
        build:
            context: .
            dockerfile: Dockerfile
            target: deploy
            args:
            -   APP_USER=${APP_USER}
            -   SERVER_NAME=${SERVER_NAME}
            -   SERVER_ADMIN=${SERVER_ADMIN}
        depends_on:
        -   db
        -   redis
        networks:
        -   djangonetwork
        volumes:
        -   media_volume_24_25:/var/www/rechol_user_section/media
        -   temp:/home/${APP_USER}/static_files/
        restart: always
    nginx:
        build:
            context: .
            dockerfile: Dockerfile
            target: nginx
            args:
            -   NGINX_CONF
        env_file: .env
        environment:
        -   APP_HOST=app
        restart: always
        healthcheck:
            test: curl -f http://nginx:80/health
            interval: 10s
            timeout: 5s
            retries: 5
        ports:
        -   80:80
        -   443:443
        depends_on:
        -   app
        networks:
        -   djangonetwork
        volumes:
      # LetsEncrypt
        -   /etc/letsencrypt/:/etc/letsencrypt/
      # To provide dhparam.pem (generated by `openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048`)
        -   /etc/ssl/:/etc/ssl/
      # LetsEncrypt acme challenge
        -   /var/www/well-known/:/var/www/well-known/
        -   media_volume_24_25:/var/www/rechol_user_section/media:ro

networks:
    djangonetwork:
        driver: bridge

volumes:
    db_volume_24_25:
    media_volume_24_25:
    redis_data:
    redis_conf:
    temp:
